//Employee.h
// Fig. 12.9: Employee.h
// Employee abstract base class.
#ifndef EMPLOYEE_H
#define EMPLOYEE_H

#include <string> // C++ standard string class

class Employee
{
public:
    Employee(const std::string&, const std::string&,
        const std::string&);
    virtual ~Employee() { } // virtual destructor

    void setFirstName(const std::string&); // set first name
    std::string getFirstName() const; // return first name

    void setLastName(const std::string&); // set last name
    std::string getLastName() const; // return last name

    void setSocialSecurityNumber(const std::string&); // set SSN
    std::string getSocialSecurityNumber() const; // return SSN

    // pure virtual function makes Employee abstract base class
    virtual double earnings() const = 0; // pure virtual
    virtual void print() const; // virtual
private:
    std::string firstName;
    std::string lastName;
    std::string socialSecurityNumber;
}; // end class Employee

#endif // EMPLOYEE_H



//Employee.cpp
// Fig. 12.10: Employee.cpp
// Abstract-base-class Employee member-function definitions.
// Note: No definitions are given for pure virtual functions.
#include <iostream>
#include "Employee.h" // Employee class definition
using namespace std;

// constructor
Employee::Employee(const string& first, const string& last,
    const string& ssn)
    : firstName(first), lastName(last), socialSecurityNumber(ssn)
{
    // empty body 
} // end Employee constructor

// set first name
void Employee::setFirstName(const string& first)
{
    firstName = first;
} // end function setFirstName

// return first name
string Employee::getFirstName() const
{
    return firstName;
} // end function getFirstName

// set last name
void Employee::setLastName(const string& last)
{
    lastName = last;
} // end function setLastName

// return last name
string Employee::getLastName() const
{
    return lastName;
} // end function getLastName

// set social security number
void Employee::setSocialSecurityNumber(const string& ssn)
{
    socialSecurityNumber = ssn; // should validate
} // end function setSocialSecurityNumber

// return social security number
string Employee::getSocialSecurityNumber() const
{
    return socialSecurityNumber;
} // end function getSocialSecurityNumber

// print Employee's information (virtual, but not pure virtual)
void Employee::print() const
{
    cout << getFirstName() << ' ' << getLastName()
        << "\nsocial security number: " << getSocialSecurityNumber();
} // end function print



//CommissionEmployee.h
// Fig. 12.13: CommissionEmployee.h
// CommissionEmployee class derived from Employee.
#ifndef COMMISSION_H
#define COMMISSION_H

#include <string> // C++ standard string class
#include "Employee.h" // Employee class definition

class CommissionEmployee : public Employee
{
public:
    CommissionEmployee(const std::string&, const std::string&,
        const std::string&, double = 0.0, double = 0.0);
    virtual ~CommissionEmployee() { } // virtual destructor

    void setCommissionRate(double); // set commission rate
    double getCommissionRate() const; // return commission rate

    void setGrossSales(double); // set gross sales amount
    double getGrossSales() const; // return gross sales amount

    // keyword virtual signals intent to override
    virtual double earnings() const override; // calculate earnings
    virtual void print() const override; // print object
private:
    double grossSales; // gross weekly sales
    double commissionRate; // commission percentage
}; // end class CommissionEmployee

#endif // COMMISSION_H



//CommissionEmployee.cpp
// Fig. 12.14: CommissionEmployee.cpp
// CommissionEmployee class member-function definitions.
#include <iostream>
#include <stdexcept>
#include "CommissionEmployee.h" // CommissionEmployee class definition
using namespace std;

// constructor 
CommissionEmployee::CommissionEmployee(const string& first,
    const string& last, const string& ssn, double sales, double rate)
    : Employee(first, last, ssn)
{
    setGrossSales(sales);
    setCommissionRate(rate);
} // end CommissionEmployee constructor

// set gross sales amount
void CommissionEmployee::setGrossSales(double sales)
{
    if (sales >= 0.0)
        grossSales = sales;
    else
        throw invalid_argument("Gross sales must be >= 0.0");
} // end function setGrossSales

// return gross sales amount
double CommissionEmployee::getGrossSales() const
{
    return grossSales;
} // end function getGrossSales

// set commission rate
void CommissionEmployee::setCommissionRate(double rate)
{
    if (rate > 0.0 && rate < 1.0)
        commissionRate = rate;
    else
        throw invalid_argument("Commission rate must be > 0.0 and < 1.0");
} // end function setCommissionRate

// return commission rate
double CommissionEmployee::getCommissionRate() const
{
    return commissionRate;
} // end function getCommissionRate

// calculate earnings; override pure virtual function earnings in Employee
double CommissionEmployee::earnings() const
{
    return getCommissionRate() * getGrossSales();
} // end function earnings

// print CommissionEmployee's information 
void CommissionEmployee::print() const
{
    cout << "commission employee: ";
    Employee::print(); // code reuse
    cout << "\ngross sales: " << getGrossSales()
        << "; commission rate: " << getCommissionRate();
} // end function print



//BasePlusCommissionEmployee.h
// Fig. 12.15: BasePlusCommissionEmployee.h
// BasePlusCommissionEmployee class derived from CommissionEmployee.
#ifndef BASEPLUS_H
#define BASEPLUS_H

#include <string> // C++ standard string class
#include "CommissionEmployee.h" // CommissionEmployee class definition

class BasePlusCommissionEmployee : public CommissionEmployee
{
public:
    BasePlusCommissionEmployee(const std::string&, const std::string&,
        const std::string&, double = 0.0, double = 0.0, double = 0.0);
    virtual ~BasePlusCommissionEmployee() { } // virtual destructor

    void setBaseSalary(double); // set base salary
    double getBaseSalary() const; // return base salary

    // keyword virtual signals intent to override
    virtual double earnings() const override; // calculate earnings
    virtual void print() const override; // print object
private:
    double baseSalary; // base salary per week
}; // end class BasePlusCommissionEmployee

#endif // BASEPLUS_H



//BasePlusCommissionEmployee.cpp
// Fig. 12.16: BasePlusCommissionEmployee.cpp
// BasePlusCommissionEmployee member-function definitions.
#include <iostream>
#include <stdexcept>
#include "BasePlusCommissionEmployee.h"
using namespace std;

// constructor 
BasePlusCommissionEmployee::BasePlusCommissionEmployee(
    const string& first, const string& last, const string& ssn,
    double sales, double rate, double salary)
    : CommissionEmployee(first, last, ssn, sales, rate)
{
    setBaseSalary(salary); // validate and store base salary
} // end BasePlusCommissionEmployee constructor

// set base salary
void BasePlusCommissionEmployee::setBaseSalary(double salary)
{
    if (salary >= 0.0)
        baseSalary = salary;
    else
        throw invalid_argument("Salary must be >= 0.0");
} // end function setBaseSalary

// return base salary
double BasePlusCommissionEmployee::getBaseSalary() const
{
    return baseSalary;
} // end function getBaseSalary

// calculate earnings;
// override virtual function earnings in CommissionEmployee
double BasePlusCommissionEmployee::earnings() const
{
    return getBaseSalary() + CommissionEmployee::earnings();
} // end function earnings

// print BasePlusCommissionEmployee's information 
void BasePlusCommissionEmployee::print() const
{
    cout << "base-salaried ";
    CommissionEmployee::print(); // code reuse
    cout << "; base salary: " << getBaseSalary();
} // end function print



//SalariedEmployee.h
// Fig. 12.11: SalariedEmployee.h
// SalariedEmployee class derived from Employee.
#ifndef SALARIED_H
#define SALARIED_H

#include <string> // C++ standard string class
#include "Employee.h" // Employee class definition

class SalariedEmployee : public Employee
{
public:
    SalariedEmployee(const std::string&, const std::string&,
        const std::string&, double = 0.0);
    virtual ~SalariedEmployee() { } // virtual destructor

    void setWeeklySalary(double); // set weekly salary
    double getWeeklySalary() const; // return weekly salary

    // keyword virtual signals intent to override
    virtual double earnings() const override; // calculate earnings
    virtual void print() const override; // print object
private:
    double weeklySalary; // salary per week
}; // end class SalariedEmployee

#endif // SALARIED_H



//SalariedEmployee.cpp
// Fig. 12.12: SalariedEmployee.cpp
// SalariedEmployee class member-function definitions.
#include <iostream>
#include <stdexcept>
#include "SalariedEmployee.h" // SalariedEmployee class definition
using namespace std;

// constructor 
SalariedEmployee::SalariedEmployee(const string& first,
    const string& last, const string& ssn, double salary)
    : Employee(first, last, ssn)
{
    setWeeklySalary(salary);
} // end SalariedEmployee constructor

// set salary
void SalariedEmployee::setWeeklySalary(double salary)
{
    if (salary >= 0.0)
        weeklySalary = salary;
    else
        throw invalid_argument("Weekly salary must be >= 0.0");
} // end function setWeeklySalary

// return salary
double SalariedEmployee::getWeeklySalary() const
{
    return weeklySalary;
} // end function getWeeklySalary

// calculate earnings; 
// override pure virtual function earnings in Employee
double SalariedEmployee::earnings() const
{
    return getWeeklySalary();
} // end function earnings

// print SalariedEmployee's information 
void SalariedEmployee::print() const
{
    cout << "salaried employee: ";
    Employee::print(); // reuse abstract base-class print function
    cout << "\nweekly salary: " << getWeeklySalary();
} // end function print



//PieceWorker.h
#ifndef PIECEWORKER_H
#define PIECEWORKER_H
#include "Employee.h"

class PieceWorker : public Employee {
public:
	PieceWorker(const std::string&, const std::string&,
		const std::string&, double = 0.0, int = 0);
	virtual ~PieceWorker() {};

	virtual double earnings() const override;
	virtual void print() const override;

private:
	double wage;
	int pieces;
};

#endif // !PIECEWORKER_H



//PieceWorker.cpp
#include "PieceWorker.h"
#include <iostream>

PieceWorker::PieceWorker(const std::string& first,
	const std::string& last, const std::string& ssn, double _wage, int _pieces)
	:Employee(first, last, ssn)
{
	wage = _wage;
	pieces = _pieces;
}

double PieceWorker::earnings() const {
	return wage * pieces;
}

void PieceWorker::print() const
{
	std::cout << "PieceWorker employee: ";
	Employee::print(); // code reuse
	std::cout << "\nwage per piece: " << wage
		<< "; number of pieces: " << pieces;
	
} // end function print



//HourlyWorker.h
#ifndef HOURLYWORKER_H
#define HOURLYWORKER_H
#include "Employee.h"

class HourlyWorker : public Employee {
public:
	HourlyWorker(const std::string&, const std::string&,
		const std::string&, double = 0.0, double = 0.0);
	virtual ~HourlyWorker() {};

	virtual double earnings() const override;
	virtual void print() const override;

private:
	double wage;
	double hours;
};

#endif // !HOURLYWORKER_H



//HourlyWorker.cpp
#include "HourlyWorker.h"
#include <iostream>

HourlyWorker::HourlyWorker(const std::string& first,
	const std::string& last, const std::string& ssn, double _wage, double _hours)
	:Employee(first, last, ssn)
{
	wage = _wage;
	hours = _hours;
}

double HourlyWorker::earnings() const {
	if (hours <= 40) {
		return wage * hours;
	}
	else {
		return wage * 40 + (hours - 40) * wage * 1.5;
	}
}

void HourlyWorker::print() const
{
	std::cout << "HourlyWorker employee: ";
	Employee::print(); // code reuse
	std::cout << "\nwage per hour: " << wage
		<< "; number of hours: " << hours;

} // end function print



//Lab12-Q3.cpp
// Fig. 12.17: fig12_17.cpp
// Processing Employee derived-class objects individually 
// and polymorphically using dynamic binding.
#include <iostream>
#include <iomanip>
#include <vector>
#include "Employee.h"
#include "SalariedEmployee.h" 
#include "CommissionEmployee.h"  
#include "BasePlusCommissionEmployee.h" 
#include "PieceWorker.h"
#include "HourlyWorker.h"
using namespace std;

void virtualViaPointer(const Employee* const); // prototype
void virtualViaReference(const Employee&); // prototype

int main()
{
    // set floating-point output formatting
    cout << fixed << setprecision(2);

    // create derived-class objects
    SalariedEmployee salariedEmployee(
        "John", "Smith", "111-11-1111", 800);
    CommissionEmployee commissionEmployee(
        "Sue", "Jones", "333-33-3333", 10000, .06);
    BasePlusCommissionEmployee basePlusCommissionEmployee(
        "Bob", "Lewis", "444-44-4444", 5000, .04, 300);
    PieceWorker pieceWorker("Michael", "Scott", "555-55-5555", 22.5, 30);
    HourlyWorker hourlyWorker("Dwight", "Schrute", "888-88-8888", 16.75, 45);

    // create vector of five base-class pointers
    vector < Employee* > employees(5);

    // initialize vector with Employees
    employees[0] = &salariedEmployee;
    employees[1] = &commissionEmployee;
    employees[2] = &basePlusCommissionEmployee;
    employees[3] = &pieceWorker;
    employees[4] = &hourlyWorker;

    for (int i = 0; i < employees.size(); i++) {
        std::cout << "Employee " << i + 1 << "\n" << std::endl;
        employees[i]->print();
        std::cout << "\n" << "The earnings for Employee " << i + 1 <<" is $" << employees[i]->earnings();
        std::cout << "\n\n";
    }
}
