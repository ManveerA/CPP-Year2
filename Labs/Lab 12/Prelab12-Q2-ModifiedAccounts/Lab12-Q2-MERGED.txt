//Account.h
#include <iostream>
#ifndef ACCOUNT_H
#define ACCOUNT_H

class Account {
public:
	Account(double = 0.0);
	virtual ~Account() {};

	virtual void credit(double);
	virtual bool debit(double);
	double getBalance();

private:
	double balance;
};
#endif // !ACCOUNT_H



//Account.cpp
#include "Account.h"

Account::Account(double bal) {
	if (bal >= 0) {
		balance = bal;
	}
	else {
		std::cout << "Balance cannot be less than 0.0. Setting to 0.0." << std::endl;
		balance = 0;
	}
}

void Account::credit(double deposit) {
	balance += deposit;
}

bool Account::debit(double withdraw) {
	if (balance >= withdraw) {
		balance -= withdraw;
		return true;
	}
	else {
		std::cout << "Debit amount exceeded account balance." << std::endl;
		return false;
	}
}

double Account::getBalance() {
	return balance;
}



//SavingsAccount.h
#include "Account.h"
#ifndef SAVINGSACCOUNT_H
#define SAVINGSACCOUNT_H

class SavingsAccount : public Account {
public:
	SavingsAccount(double = 0.0, double = 0.0);
	virtual ~SavingsAccount() {};

	double calculateInterest();
private:
	double interestRate;
};
#endif // !SAVINGSACCOUNT_H



//SavingsAccount.cpp
#include "SavingsAccount.h"

SavingsAccount::SavingsAccount(double bal, double iRate) : Account(bal) {
	interestRate = iRate;
}

double SavingsAccount::calculateInterest() {
	return interestRate * Account::getBalance();
}



//ChequingAccount.h
#include "Account.h"
#ifndef CHEQUINGACCOUNT_H
#define CHEQUINGACCOUNT_H

class ChequingAccount : public Account {
public:
	ChequingAccount(double = 0.0, double = 1);
	virtual ~ChequingAccount() {};

	virtual void credit(double) override;
	virtual bool debit(double) override;
private:
	double transactionFee;
};
#endif // !CHEQUINGACCOUNT_H



//ChequingAccount.cpp
#include "ChequingAccount.h"

ChequingAccount::ChequingAccount(double bal, double fee) : Account(bal) {
	transactionFee = fee;
}

void ChequingAccount::credit(double deposit) {
	Account::credit(deposit);
	Account::credit(-1 * transactionFee);
	std::cout << "$" << transactionFee << " transaction fee charged." << std::endl;
}

bool ChequingAccount::debit(double withdraw) {
	if (Account::debit(withdraw)) {
		Account::credit(-1 * transactionFee);
		std::cout << "$" << transactionFee << " transaction fee charged" << std::endl;
	}
	return true;
}



//Lab12-Q2.cpp
#include <iostream>
#include <iomanip>
#include "Account.h"
#include "SavingsAccount.h"
#include "ChequingAccount.h"
#include <vector>
using namespace std;

int main()
{
	std::cout << fixed << setprecision(2);
	SavingsAccount account1(25, 0.03);
	ChequingAccount account2(80, 1.00);
	SavingsAccount account3(200, 0.015);
	ChequingAccount account4(400, 0.50);

	std::vector<Account*>vectorOfAccounts(4);
	vectorOfAccounts[0] = &account1;
	vectorOfAccounts[1] = &account2;
	vectorOfAccounts[2] = &account3;
	vectorOfAccounts[3] = &account4;

	for (int i = 0; i < vectorOfAccounts.size(); i++) {
		double input = 0;
		bool isSavings = false;

		std::cout << "Account " << i + 1 << "\n" << std::endl;

		SavingsAccount* tempPtr = dynamic_cast<SavingsAccount*>(vectorOfAccounts[i]);

		if (tempPtr != NULL) {
			std::cout << "Account " << i + 1 << " is a Savings Account" << std::endl;
			isSavings = true;
		}
		else {
			std::cout << "Account " << i + 1 << " is a Chequing Account" << std::endl;
		}

		std::cout << "The balance is $" << vectorOfAccounts[i]->getBalance() << std::endl;

		std::cout << "\nEnter an amount to withdraw: $";
		std::cin >> input;
		vectorOfAccounts[i]->debit(input);
		
		std::cout << "Enter an amount to deposit: $";
		std::cin >> input;
		vectorOfAccounts[i]->credit(input);

		if (isSavings) {
			std::cout << "Adding $" << tempPtr->calculateInterest() << " interest." << std::endl;
			tempPtr->credit(tempPtr->calculateInterest());
		}

		std::cout << "Updated Account " << i + 1 << " balance: $" << vectorOfAccounts[i]->getBalance()
			<< "\n" << std::endl;
	}
}
